/*
 * Copyright 2016 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.workerrostering.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.training.workerrostering.domain.Employee;
import org.optaplanner.training.workerrostering.domain.Roster;
import org.optaplanner.training.workerrostering.domain.RosterParametrization;
import org.optaplanner.training.workerrostering.domain.ShiftAssignment;
import org.optaplanner.training.workerrostering.domain.Skill;
import org.optaplanner.training.workerrostering.domain.Spot;
import org.optaplanner.training.workerrostering.domain.TimeSlot;

import java.time.temporal.ChronoUnit;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints (Negative)
// ############################################################################
rule "No multiple spot assignment for same shift"
    when
        $s : ShiftAssignment(
                employee != null,
                $e : employee,
                $leftEndDateTime : getTimeSlot().getEndDateTime(),
                $leftShiftHour: getTimeSlot().getStartDateTime().getHour())
        ShiftAssignment(
                employee == $e,
                $leftEndDateTime == getTimeSlot().getEndDateTime(),
                $leftShiftHour == getTimeSlot().getStartDateTime().getHour())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -270);
end

rule "At most one shift assignment per day per employee"
    when
        $s : ShiftAssignment(
                employee != null,
                $e : employee,
                $leftDay : getTimeSlot().getStartDateTime().toLocalDate())
        ShiftAssignment(
                employee == $e,
                getTimeSlot().getStartDateTime().toLocalDate() == $leftDay)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -200);
end

rule "No 2 shifts within less than 24 hours from each other (forward)"
    when
        $s : ShiftAssignment(
                employee != null,
                $e : employee,
                $leftEndDateTime : getTimeSlot().getEndDateTime())
        ShiftAssignment(
                employee == $e,
                $leftEndDateTime < getTimeSlot().getEndDateTime(),
                $leftEndDateTime.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) < 24)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -165);
end

rule "No 2 shifts within 12 hours from each other (Incentive)"
    when
        $s : ShiftAssignment(
                employee != null,
                $e : employee,
                $leftEndDateTime : getTimeSlot().getEndDateTime())
        ShiftAssignment(
                $leftEndDateTime == getTimeSlot().getEndDateTime(),
                $leftEndDateTime.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) < 24,
                employee != $e)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 57);
end

rule "Required skill for a shift"
    when
        ShiftAssignment(
                employee != null,
                !getSpot().getRequiredSkill().toString().equals("Any"),
                getEmployee().getSkillName().indexOf(getSpot().getRequiredSkill().toString()) >= 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 43);
end

rule "Unavailable time slots for an employee"
    when
        ShiftAssignment(
                employee != null,
                getEmployee().getUnavailableTimeSlotSet().contains(getTimeSlot()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -209);
end

rule "Employee is available"
    when
        ShiftAssignment(
                employee != null,
                !getEmployee().getUnavailableTimeSlotSet().contains(getTimeSlot()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, 209);
end

rule "Is not a reserve"
    when 
        $s1 : ShiftAssignment(employee != null, !employee.getIsReserve())
    then
        scoreHolder.addHardConstraintMatch(kcontext, 89);
end

// ############################################################################
// Hard constraints (Positive)
// ############################################################################

rule "Should work consecutive shifts (1 day, 1 night)"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $e.getShift().equals("Any"),
                $firstStart: getTimeSlot().getStartDateTime(),
                $firstEnd: getTimeSlot().getEndDateTime()
              )
        $s2 : ShiftAssignment(
                employee == $e,
                $firstEnd <  getTimeSlot().getStartDateTime(),
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 24
              )
    then
        scoreHolder.addHardConstraintMatch(kcontext, 213);
end

rule "Should not be working after 2 consecutive shifts (forward)"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $e.getShift().equals("Any"),
                !employee.getIsReserve(),
                $firstStart: getTimeSlot().getStartDateTime(),
                $firstEnd: getTimeSlot().getEndDateTime()
              )
        $s2 : ShiftAssignment(
                employee == $e,
                $firstEnd < getTimeSlot().getStartDateTime(),
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 24,
                $secondEnd: getTimeSlot().getEndDateTime()
              )
        $s3 : ShiftAssignment(
                employee == $e,
                $secondEnd < getTimeSlot().getStartDateTime(),
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0 ||
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 12 ||
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 24 ||
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 36
            )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -165);
end

rule "Should not be working after 2 consecutive shifts (backward)"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $e.getShift().equals("Any"),
                !employee.getIsReserve(),
                $firstStart: getTimeSlot().getStartDateTime(),
                $firstEnd: getTimeSlot().getEndDateTime()
              )
        $s2 : ShiftAssignment(
                employee == $e,
                $firstStart > getTimeSlot().getEndDateTime(),
                getTimeSlot().getEndDateTime().until($firstStart, ChronoUnit.HOURS) == 24,
                $secondStart: getTimeSlot().getStartDateTime()
              )
        $s3 : ShiftAssignment(
                employee == $e,
                $secondStart > getTimeSlot().getEndDateTime(),
                getTimeSlot().getEndDateTime().until($secondStart, ChronoUnit.HOURS) == 0 ||
                getTimeSlot().getEndDateTime().until($secondStart, ChronoUnit.HOURS) == 12 ||
                getTimeSlot().getEndDateTime().until($secondStart, ChronoUnit.HOURS) == 24 ||
                getTimeSlot().getEndDateTime().until($secondStart, ChronoUnit.HOURS) == 36
            )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -165);
end

rule "Reserves who have worked before should will be lesser prioritised"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                employee.getIsReserve(),
                $firstStart: getTimeSlot().getStartDateTime(),
                $firstEnd: getTimeSlot().getEndDateTime()
              )
        $s2 : ShiftAssignment(
                employee == $e,
                $firstStart > getTimeSlot().getEndDateTime(),
                getTimeSlot().getEndDateTime().until($firstStart, ChronoUnit.HOURS) >= 12
              )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -322);
end

rule "Shift Workers for permanent Morning shift (Should work Morning)"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $e.getShift().equals("Morning"),
                $firstStart: getTimeSlot().getStartDateTime().getHour() == 8
              )
    then
        scoreHolder.addHardConstraintMatch(kcontext, 87);
end

rule "Shift Workers for permanent Morning shift (Should not work Night)"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $e.getShift().equals("Morning"),
                $firstStart: getTimeSlot().getStartDateTime().getHour() == 20
              )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -87);
end

rule "Shift Workers for Night shift (Should work Night)"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $e.getShift().equals("Night"),
                $firstStart: getTimeSlot().getStartDateTime().getHour() == 20
              )
    then
        scoreHolder.addHardConstraintMatch(kcontext, 87);
end

rule "Shift Workers for Night shift (Should not work Morning)"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $e.getShift().equals("Night"),
                $firstStart: getTimeSlot().getStartDateTime().getHour() == 8
              )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -87);
end

rule "Should work consecutive shifts (Day Only)(1 day, 1 day)"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $e.getShift().equals("Morning") || $e.getShift().equals("Night"),
                $firstStart: getTimeSlot().getStartDateTime(),
                $firstEnd: getTimeSlot().getEndDateTime()
              )
        $s2 : ShiftAssignment(
                employee == $e,
                $firstEnd <  getTimeSlot().getEndDateTime(),
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 12
              )
    then
        scoreHolder.addHardConstraintMatch(kcontext, 123);
end

rule "Should take 2 days off after working consecutive shifts (Morning Only)"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $e.getShift().equals("Morning") || $e.getShift().equals("Night"),
                $firstStart: getTimeSlot().getStartDateTime(),
                $firstEnd: getTimeSlot().getEndDateTime()
              )
        $s2 : ShiftAssignment(
                employee == $e,
                $firstEnd <  getTimeSlot().getEndDateTime(),
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 12,
                $secondEnd: getTimeSlot().getEndDateTime()
              )
        $s3 : ShiftAssignment(
                employee == $e,
                $secondEnd <  getTimeSlot().getEndDateTime(),
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) >= 0,
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) <= 24
              )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -105);
end