/*
 * Copyright 2016 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.workerrostering.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.training.workerrostering.domain.Employee;
import org.optaplanner.training.workerrostering.domain.Roster;
import org.optaplanner.training.workerrostering.domain.RosterParametrization;
import org.optaplanner.training.workerrostering.domain.ShiftAssignment;
import org.optaplanner.training.workerrostering.domain.Skill;
import org.optaplanner.training.workerrostering.domain.Spot;
import org.optaplanner.training.workerrostering.domain.TimeSlot;

import java.time.temporal.ChronoUnit;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints (Negative)
// ############################################################################
rule "No multiple spot assignment for same shift"
    when
        $s : ShiftAssignment(
                employee != null,
                $e : employee,
                $leftEndDateTime : getTimeSlot().getEndDateTime(),
                $leftShiftHour: getTimeSlot().getStartDateTime().getHour())
        ShiftAssignment(
                employee == $e,
                $leftEndDateTime == getTimeSlot().getEndDateTime(),
                $leftShiftHour == getTimeSlot().getStartDateTime().getHour())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -270);
end

rule "At most 1 full day shift assignment per day per employee"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                getTimeSlot().getStartDateTime().getHour() == 8 || getTimeSlot().getStartDateTime().getHour() == 20,
                $firstEnd: getTimeSlot().getEndDateTime())
        $s2 : ShiftAssignment (
                employee == $e,
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0,
                $secondEnd: getTimeSlot().getEndDateTime())
        ShiftAssignment(
                employee == $e,
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -200);
end

rule "No consecutive Shifts"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $firstEnd : getTimeSlot().getEndDateTime(),
                getTimeSlot().getStartDateTime().getHour() == 8 ||
                getTimeSlot().getStartDateTime().getHour() == 20)
        $s2 : ShiftAssignment(
                $e == employee,
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0,
                $secondEnd: getTimeSlot().getEndDateTime())
        $s3 : ShiftAssignment(
                $e != employee,
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0,
                $thirdEnd: getTimeSlot().getEndDateTime())
    then
        scoreHolder.addHardConstraintMatch(kcontext, 131);
end

rule "Shifts should be abide by shift schedule (8AM)"
    when
        $s1 : ShiftAssignment (
            employee != null,
            $e : employee,
            $leftDay: getTimeSlot().getStartDateTime().toLocalDate(),
            $firstEnd: getTimeSlot().getEndDateTime()
            )
        $s2 : ShiftAssignment (
            employee == $e,
            $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 130);
end

rule "Shifts should be in shift schedule (8PM)"
    when
        $s1 : ShiftAssignment (
            employee != null,
            $e : employee,
            $leftDay: getTimeSlot().getStartDateTime().toLocalDate(),
            $firstEnd: getTimeSlot().getEndDateTime(),
            getTimeSlot().getStartDateTime().getHour() == 20)
        $s2 : ShiftAssignment (
            employee == $e,
            $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 130);
end

rule "Both spots for the same shift should be the same"
    when
        $s : ShiftAssignment(
                employee != null,
                $e : employee,
                getTimeSlot().getStartDateTime().getHour() == 8 ||
                getTimeSlot().getStartDateTime().getHour() == 20,
                $firstSpotName: getSpot().getName(),
                $firstEnd: getTimeSlot().getEndDateTime())
        ShiftAssignment(
                employee == $e,
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0,
                $firstSpotName.equals(getSpot().getName()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, 125);
end

rule "Both spots for the same shift are not the same"
    when
        $s : ShiftAssignment(
                employee != null,
                $e : employee,
                getTimeSlot().getStartDateTime().getHour() == 8 ||
                getTimeSlot().getStartDateTime().getHour() == 20,
                $firstSpotName: getSpot().getName(),
                $firstEnd: getTimeSlot().getEndDateTime())
        ShiftAssignment(
                employee == $e,
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0,
                !$firstSpotName.equals(getSpot().getName()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -235);
end

rule "Should work consecutive shifts (1 day, 1 night)"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                !employee.getIsReserve(),
                $firstStart: getTimeSlot().getStartDateTime(),
                $firstEnd: getTimeSlot().getEndDateTime()
              )
        $s2 : ShiftAssignment(
                employee == $e,
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0,
                $secondEnd: getTimeSlot().getEndDateTime()
              )
        $s3 : ShiftAssignment(
                employee == $e,
                $secondEnd <  getTimeSlot().getStartDateTime(),
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0||
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 6||
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 12||
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 18
              )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -150);
end

rule "Should take a 2 day break after completing 1 successful shift cycle"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                !employee.getIsReserve(),
                $firstStart: getTimeSlot().getStartDateTime(),
                $firstEnd: getTimeSlot().getEndDateTime()
              )
        $s2 : ShiftAssignment(
                employee == $e,
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0,
                $secondEnd: getTimeSlot().getEndDateTime()
              )
        $s3 : ShiftAssignment(
                employee == $e,
                $secondEnd <  getTimeSlot().getStartDateTime(),
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 24,
                $thirdEnd: getTimeSlot().getEndDateTime()
              )
        $s4 : ShiftAssignment(
                employee == $e,
                $thirdEnd < getTimeSlot().getEndDateTime(),
                $thirdEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) >= 6 &&
                $thirdEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) <= 48
              )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -159);
end

rule "Required skill for a shift"
    when
        ShiftAssignment(
                employee != null,
                !getSpot().getRequiredSkill().toString().equals("Any"),
                getEmployee().getSkillName().indexOf(getSpot().getRequiredSkill().toString()) >= 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 43);
end

rule "Reserves who have worked before should will be lesser prioritised"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                employee.getIsReserve(),
                getTimeSlot().getStartDateTime().getHour() == 8 || getTimeSlot().getStartDateTime().getHour() == 20,
                $firstStart: getTimeSlot().getStartDateTime(),
                $firstEnd: getTimeSlot().getEndDateTime()
              )
        $s2 : ShiftAssignment(
                employee == $e,
                $firstStart > getTimeSlot().getEndDateTime(),
                getTimeSlot().getEndDateTime().until($firstStart, ChronoUnit.HOURS) == 0,
                $secondEnd: getTimeSlot().getEndDateTime()
              )
        $s3 : ShiftAssignment(
                employee == $e,
                $secondEnd < getTimeSlot().getEndDateTime(),
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0 
              )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -322);
end

rule "Is not a reserve"
    when 
        $s1 : ShiftAssignment(employee != null, !employee.getIsReserve())
    then
        scoreHolder.addHardConstraintMatch(kcontext, 89);
end

rule "Unavailable only for the first Slot"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                getTimeSlot().getStartDateTime().getHour() == 8 ||
                getTimeSlot().getStartDateTime().getHour() == 20,
                $spotName: getSpot().getName(),
                $firstEnd: getTimeSlot().getEndDateTime(),
                $firstTimeSlot: getTimeSlot(),
                getEmployee().getUnavailableTimeSlotSet().contains(getTimeSlot()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -333);
end

rule "Unavailable only for the second Slot"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                getTimeSlot().getStartDateTime().getHour() == 2 ||
                getTimeSlot().getStartDateTime().getHour() == 14,
                $firstStart: getTimeSlot().getStartDateTime(),
                !getEmployee().getUnavailableTimeSlotSet().contains(getTimeSlot()))
        $s2 : ShiftAssignment(
                employee != null,
                employee == $e,
                getTimeSlot().getEndDateTime().until($firstStart, ChronoUnit.HOURS) == 0,
                getEmployee().getUnavailableTimeSlotSet().contains(getTimeSlot()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -333);
end

rule "Unavailable time slots for an employee"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                getTimeSlot().getStartDateTime().getHour() == 8 ||
                getTimeSlot().getStartDateTime().getHour() == 20,
                $spotName: getSpot().getName(),
                $firstEnd: getTimeSlot().getEndDateTime(),
                $firstTimeSlot: getTimeSlot())
        $s2 : ShiftAssignment (
                employee != null,
                employee == $e,
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0,
                $spotName.equals(getSpot().getName),
                getEmployee().getUnavailableTimeSlotSet().contains(getTimeSlot()) ||
                getEmployee().getUnavailableTimeSlotSet().contains($firstTimeSlot))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -133);
end

rule "Employee is available"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                getTimeSlot().getStartDateTime().getHour() == 8 ||
                getTimeSlot().getStartDateTime().getHour() == 20,
                $spotName: getSpot().getName(),
                $firstEnd: getTimeSlot().getEndDateTime(),
                $firstTimeSlot: getTimeSlot())
        $s2 : ShiftAssignment (
                employee != null,
                employee == $e,
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 0,
                $spotName.equals(getSpot().getName),
                !getEmployee().getUnavailableTimeSlotSet().contains(getTimeSlot()) &&
                !getEmployee().getUnavailableTimeSlotSet().contains($firstTimeSlot))
    then
        scoreHolder.addHardConstraintMatch(kcontext, 133);
end
