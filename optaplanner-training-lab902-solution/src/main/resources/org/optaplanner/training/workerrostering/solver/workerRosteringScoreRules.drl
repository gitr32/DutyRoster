/*
 * Copyright 2016 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.workerrostering.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.training.workerrostering.domain.Employee;
import org.optaplanner.training.workerrostering.domain.Roster;
import org.optaplanner.training.workerrostering.domain.RosterParametrization;
import org.optaplanner.training.workerrostering.domain.ShiftAssignment;
import org.optaplanner.training.workerrostering.domain.Skill;
import org.optaplanner.training.workerrostering.domain.Spot;
import org.optaplanner.training.workerrostering.domain.TimeSlot;

import java.time.temporal.ChronoUnit;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints (Negative)
// ############################################################################
rule "No multiple spot assignment for same shift"
    when
        $s : ShiftAssignment(
                employee != null,
                $e : employee,
                $leftEndDateTime : getTimeSlot().getEndDateTime(),
                $leftShiftHour: getTimeSlot().getStartDateTime().getHour())
        ShiftAssignment(
                employee == $e,
                $leftEndDateTime == getTimeSlot().getEndDateTime(),
                $leftShiftHour == getTimeSlot().getStartDateTime().getHour())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -215);
end

rule "At most one shift assignment per day per employee"
    when
        $s : ShiftAssignment(
                employee != null,
                $e : employee,
                $leftDay : getTimeSlot().getStartDateTime().toLocalDate())
        ShiftAssignment(
                employee == $e,
                getTimeSlot().getStartDateTime().toLocalDate() == $leftDay)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -200);
end

rule "No 2 shifts within 12 hours from each other"
    when
        $s : ShiftAssignment(
                employee != null,
                $e : employee,
                $leftEndDateTime : getTimeSlot().getEndDateTime())
        ShiftAssignment(
                employee == $e,
                $leftEndDateTime < getTimeSlot().getEndDateTime(),
                $leftEndDateTime.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) < 12)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -165);
end

rule "Required skill for a shift"
    when
        ShiftAssignment(
                employee != null,
                !getSpot().getRequiredSkill().toString().equals("Any"),
                getEmployee().getSkillName().indexOf(getSpot().getRequiredSkill().toString()) < 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 0);
end

rule "Unavailable time slots for an employee"
    when
        ShiftAssignment(
                employee != null,
                getEmployee().getUnavailableTimeSlotSet().contains(getTimeSlot()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, 0);
end

rule "Is not a reserve"
    when 
        $s1 : ShiftAssignment(employee != null, !employee.getIsReserve())
    then
        scoreHolder.addHardConstraintMatch(kcontext, 75);
end

// ############################################################################
// Hard constraints (Positive)
// ############################################################################

rule "Should work 2 consecutive days worth of shift (forward)"
    when

        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $firstEnd : getTimeSlot().getEndDateTime())
        $s2 : ShiftAssignment(
                employee != null,
                $e == employee,
                $firstEnd < getTimeSlot().getEndDateTime(),
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 12)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 73);
end

rule "Should not be working after 2 consecutive shifts (forward)"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $firstStart: getTimeSlot().getStartDateTime()
              )
        $s2 : ShiftAssignment(
                employee == $e,
                $firstStart > getTimeSlot().getStartDateTime(),
                getTimeSlot().getEndDateTime().until($firstStart, ChronoUnit.HOURS) == 12,
                $secondEnd: getTimeSlot().getEndDateTime()
              )

        $s3 : ShiftAssignment(
                employee == $e,
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 12 ||
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 24 ||
                $secondEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) == 36
            )
    then
        scoreHolder.addHardConstraintMatch(kcontext, 0);
end

rule "Should not have a standalone shift (24 Hours)"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $firstStart: getTimeSlot().getStartDateTime(),
                $firstEnd: getTimeSlot().getEndDateTime()
              )
        $s2 : ShiftAssignment(
                employee == $e,
                $firstEnd <  getTimeSlot().getStartDateTime(),
                $firstEnd.until(getTimeSlot().getStartDateTime(), ChronoUnit.HOURS) >= 24
              )
        $s3 : ShiftAssignment(
                employee == $e,
                $firstStart > getTimeSlot().getEndDateTime(),
                getTimeSlot().getEndDateTime().until($firstStart, ChronoUnit.HOURS) >= 24
            )
    then
        scoreHolder.addHardConstraintMatch(kcontext, 0);
end

rule "Should be working in the same shift"
    when
        $s1 : ShiftAssignment(
                employee != null,
                $e : employee,
                $firstEnd: getTimeSlot().getEndDateTime(),
                $firstShiftHour: getTimeSlot().getStartDateTime().getHour(),
                $firstDay : getTimeSlot().getStartDateTime().toLocalDate()
                )
        $s2 : ShiftAssignment(
                employee != null,
                employee == $e,
                $firstEnd < getTimeSlot().getEndDateTime(),
                $firstShiftHour == getTimeSlot().getStartDateTime().getHour(),
                $firstDay != getTimeSlot().getStartDateTime().toLocalDate())
    then
        scoreHolder.addHardConstraintMatch(kcontext, 35);
end